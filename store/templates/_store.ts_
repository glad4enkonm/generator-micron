import { defineStore } from "pinia";
<% entities.forEach(function(entity){ -%>
import type { I<%- entity.name %> } from "@/model/<%- entity.camelName %>";
<% }) -%>
import <%- nameCamelCase %>Service from "@/api/<%- nameCamelCase %>"
import type { IEntityDictionary } from "@/util/dictionary";
import {
  createElementBase,
  deleteElementBase,
  loadElementBase,
  loadElementListBase,
  updateElementBase
} from "@/util/store";

export const <%- nameCamelCase %>Store = defineStore({
  id: "<%- nameCamelCase %>",
  state: () => ({
<% entities.forEach(function(entity){ -%>
    <%- entity.camelName %>Dictionary: {} as IEntityDictionary<I<%- entity.name %>>,
    <%- entity.camelName %>List: [] as I<%- entity.name %>[],
<% }) -%>
  }),
  actions: {
<% entities.forEach(function(entity){ -%>
    // Операции для <%- entity.name %> -------------------------------
<%   if (entity.controller.operations.includes("R")) { -%>
    // Запросить данные
    async load<%- entity.name %>List() {
      await loadElementListBase(() => <%- nameCamelCase %>Service.get<%- entity.name %>List(),
        entity => entity.<%- entity.camelName %>Id,
        (newDictionary, originalList) => {
          this.<%- entity.camelName %>Dictionary = newDictionary
          this.<%- entity.camelName %>List = originalList
        })
    },

    async load<%- entity.name %>(id: bigint) {
      return await loadElementBase(id, id =>  <%- nameCamelCase %>Service.get<%- entity.name %>(id),
        entity => entity.<%- entity.camelName %>Id, (id, entity) => this.<%- entity.camelName %>Dictionary[id] = entity)
    },
<%   } -%>
<%   if (entity.controller.operations.includes("C")) { -%>
    // Создать данные
    async create<%- entity.name %>(payload:  I<%- entity.name %>) {
      return await createElementBase(payload, p =>  <%- nameCamelCase %>Service.create<%- entity.name %>(p),
        entity => entity.<%- entity.camelName %>Id, (id, entity) => this.<%- entity.camelName %>Dictionary[id] = entity)
    },
<%   } -%>
<%   if (entity.controller.operations.includes("U")) { -%>
    // Обновить данные
    async update<%- entity.name %>(updatedEntity:  I<%- entity.name %>) {
      return await updateElementBase(updatedEntity, diff => <%- nameCamelCase %>Service.update<%- entity.name %>(diff),
        entity => entity.<%- entity.camelName %>Id, id => this.<%- entity.camelName %>Dictionary[id],
        (id, entity) => this.<%- entity.camelName %>Dictionary[id] = entity, "<%- entity.camelName %>Id")
    },
<%   } -%>
<%   if (entity.controller.operations.includes("D")) { -%>
    // Удалить данные
    async delete<%- entity.name %>(id: bigint) {
      return await deleteElementBase<I<%- entity.name %>>(id,
        id => <%- nameCamelCase %>Service.delete<%- entity.name %>(id),
        entity => entity.<%- entity.camelName %>Id, id => this.<%- entity.camelName %>Dictionary[id],
        id => delete this.<%- entity.camelName %>Dictionary[id])
    },
<%   } -%>
<% }) -%>
    async load() {

    },
  },
});
