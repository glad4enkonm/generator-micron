import { defineStore } from "pinia";
<% entities.forEach(function(entity){ -%>
import type { I<%- entity.name %> } from "@/model/<%- entity.camelName %>";
<% }) -%>
import <%- nameCamelCase %>Service from "@/api/<%- nameCamelCase %>"
import { useErrorStore } from "@/stores/error";
import { propIntersectionShallowObjectDiff } from "@/util/diff";

export const useSettingsStore = defineStore({
  id: "<%- nameCamelCase %>",
  state: () => ({
<% entities.forEach(function(entity){ -%>
    <%- entity.camelName %>: {} as I<%- entity.name %>,
<% }) -%>
  }),
  actions: {
<% entities.forEach(function(entity){ -%>
    // Операции для <%- entity.name %> -------------------------------
<%   if (entity.controller.operations.includes("R")) { -%>
    // Запросить данные
    async load<%- entity.name %>List() {
        const result = await <%- nameCamelCase %>Service.get<%- entity.name %>List()
        useErrorStore().setErrorMessageIfAny(result)
        this.<%- entity.camelName %> = result.data
    },

    async load<%- entity.name %>(id: number) {
        const result = await <%- nameCamelCase %>Service.get<%- entity.name %>(id)
        useErrorStore().setErrorMessageIfAny(result)
        return this.<%- entity.camelName %> = result.data
    },
<%   } -%>
<%   if (entity.controller.operations.includes("C")) { -%>
    // Создать данные
    async create<%- entity.name %>(payload:  I<%- entity.name %>) {
        const result = await <%- nameCamelCase %>Service.create<%- entity.name %>(id)
        useErrorStore().setErrorMessageIfAny(result)
        return this.<%- entity.camelName %> = result.data
    },
<%   } -%>
<%   if (entity.controller.operations.includes("U")) { -%>
    // Обновить данные
    async create<%- entity.name %>(updatedEntity:  I<%- entity.name %>) {
        const entityDiff = propIntersectionShallowObjectDiff(this.<%- entity.camelName %>, updatedEntity)
        const updateResponse = await <%- nameCamelCase %>Service.update(entityDiff)
        if (updateResponse == null) return
        useErrorStore().setErrorMessageIfAny(updateResponse)
        if (updateResponse.status == 200) {
            this.<%- nameCamelCase %> = updateResponse.data
        }
    },
<%   } -%>
<%   if (entity.controller.operations.includes("D")) { -%>
    // Удалить данные
    async delete<%- entity.name %>(id: number) {
        const result = await <%- nameCamelCase %>Service.delete<%- entity.name %>(id)
        useErrorStore().setErrorMessageIfAny(result)
    },
<%   } -%>
<% }) -%>
    async load() {

    },
  },
});
